import sys
import traceback
import threading
import time
from http.server import HTTPServer, SimpleHTTPRequestHandler
import socketserver
from PyQt5.QtWidgets import (QApplication, QMainWindow, QTextEdit, 
                            QSplitter, QPushButton, QVBoxLayout, QWidget,
                            QHBoxLayout, QLabel, QLineEdit, QMessageBox,
                            QTextBrowser)
from PyQt5.QtWebEngineWidgets import QWebEngineView
from PyQt5.QtCore import Qt, QTimer
from PyQt5.QtGui import QFont, QColor
import webbrowser
from datetime import datetime

class MagicWeb:
    """–°–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π —è–∑—ã–∫ –≤ –º–∏—Ä–µ - MagicWeb"""
    
    @staticmethod
    def compile_to_html(code):
        """
        –ö–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç MagicWeb –∫–æ–¥ –≤ HTML
        """
        logs = []
        html = []
        css = []
        js = []
        
        try:
            lines = code.split('\n')
            for i, line in enumerate(lines, 1):
                line = line.strip()
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                if not line or line.startswith('//'):
                    continue
                
                try:
                    # –°–£–ü–ï–†-–ü–†–û–°–¢–û–ô –ê–ù–ê–õ–ò–ó
                    if ':' in line and not line.startswith('<'):
                        # CSS —Å—Ç–∏–ª—å - –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
                        valid_properties = ['background', 'color', 'font', 'padding', 'margin', 
                                          'text-align', 'border', 'width', 'height', 'display',
                                          'flex-direction', 'justify-content', 'align-items',
                                          'opacity', 'border-radius', 'box-shadow', 'position']
                        
                        prop = line.split(':')[0].strip()
                        if prop in valid_properties:
                            if not line.endswith(';'):
                                line += ';'
                            css.append(line)
                            logs.append(f"üé® –°—Ç—Ä–æ–∫–∞ {i}: CSS - {line}")
                        else:
                            logs.append(f"‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ {i}: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ - {prop}")
                    
                    elif line.startswith(('alert ', 'log ')):
                        # JavaScript
                        if line.startswith('log '):
                            msg = line[4:].strip().replace('"', "'")
                            line = f'console.log("{msg}");'
                        elif line.startswith('alert '):
                            msg = line[6:].strip().replace('"', "'")
                            line = f'alert("{msg}");'
                        js.append(line)
                        logs.append(f"‚ö° –°—Ç—Ä–æ–∫–∞ {i}: JS - {line}")
                    
                    elif line.startswith('<'):
                        # HTML —Ç–µ–≥
                        html.append(line)
                        logs.append(f"üìÑ –°—Ç—Ä–æ–∫–∞ {i}: HTML - {line}")
                    
                    else:
                        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç - –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ –ø–∞—Ä–∞–≥—Ä–∞—Ñ
                        html.append(f"<p>{line}</p>")
                        logs.append(f"üìù –°—Ç—Ä–æ–∫–∞ {i}: –¢–µ–∫—Å—Ç -> {line}")
                        
                except Exception as e:
                    logs.append(f"‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ {i}: –û—à–∏–±–∫–∞ - {e}")
                    continue
            
            # –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞
            if not css:
                css = [
                    "body: background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);",
                    "body: color: white;",
                    "body: font-family: Arial, sans-serif;",
                    "body: text-align: center;",
                    "body: padding: 50px;",
                    "body: margin: 0;",
                    "h1: font-size: 48px;",
                    "h1: margin: 20px 0;",
                    "p: font-size: 20px;",
                    "p: opacity: 0.9;",
                    "button: background: #ff6b6b;",
                    "button: color: white;",
                    "button: border: none;",
                    "button: padding: 15px 30px;",
                    "button: font-size: 18px;",
                    "button: margin: 10px;",
                    "button: border-radius: 25px;",
                    "button: cursor: pointer;"
                ]
                logs.append("üé® –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ CSS")
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º CSS –ø—Ä–∞–≤–∏–ª—å–Ω–æ
            formatted_css = []
            current_selector = None
            current_rules = []
            
            for line in css:
                if ':' in line:
                    selector, rule = line.split(':', 1)
                    selector = selector.strip()
                    rule = rule.strip()
                    
                    if current_selector != selector:
                        if current_selector and current_rules:
                            formatted_css.append(f"{current_selector} {{ {' '.join(current_rules)} }}")
                        current_selector = selector
                        current_rules = []
                    
                    current_rules.append(rule)
            
            if current_selector and current_rules:
                formatted_css.append(f"{current_selector} {{ {' '.join(current_rules)} }}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–π HTML –µ—Å–ª–∏ –ø—É—Å—Ç–æ
            if not html:
                html = [
                    "<h1>üöÄ MagicWeb</h1>",
                    "<p>–°–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π —è–∑—ã–∫ –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏!</p>",
                    "<button onclick=\"alert('–í—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç! üéâ')\">–ù–∞–∂–º–∏ –º–µ–Ω—è</button>"
                ]
                logs.append("üìÑ –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è HTML")
            
            final_html = f"""
            <!DOCTYPE html>
            <html>
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>MagicWeb</title>
                <style>
                {chr(10).join(formatted_css)}
                </style>
            </head>
            <body>
                {' '.join(html)}
                <script>
                {chr(10).join(js)}
                </script>
            </body>
            </html>
            """
            
            logs.append("‚úÖ –ö–æ–º–ø–∏–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
            return final_html, logs
            
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞: {e}"
            logs.append(error_msg)
            error_html = f"""
            <html><body style="background: #ffebee; color: #d32f2f; padding: 50px; font-family: Arial;">
                <h1>‚ö†Ô∏è –û—à–∏–±–∫–∞</h1>
                <p>{str(e)}</p>
                <p>–°–∞–π—Ç –≤—Å—ë —Ä–∞–≤–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç! üéâ</p>
            </body></html>
            """
            return error_html, logs

class SimpleWebServer:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π HTTP —Å–µ—Ä–≤–µ—Ä"""
    def __init__(self, port=8000):
        self.port = port
        self.server = None
        self.is_running = False
        self.current_html = "<h1>Server starting...</h1>"
    
    def start_server(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä"""
        class CustomHandler(SimpleHTTPRequestHandler):
            def do_GET(self):
                if self.path == '/':
                    self.send_response(200)
                    self.send_header('Content-type', 'text/html; charset=utf-8')
                    self.end_headers()
                    self.wfile.write(self.server.current_html.encode('utf-8'))
                else:
                    super().do_GET()
        
        class CustomTCPServer(socketserver.TCPServer):
            def __init__(self, server_address, handler_class, main_server):
                super().__init__(server_address, handler_class)
                self.current_html = main_server.current_html
        
        try:
            self.server = CustomTCPServer(("", self.port), CustomHandler, self)
            self.is_running = True
            print(f"üåê –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: http://localhost:{self.port}")
            self.server.serve_forever()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            self.is_running = False
    
    def stop_server(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä"""
        if self.server:
            self.is_running = False
            self.server.shutdown()
            print("‚èπÔ∏è –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def update_content(self, html_content):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–µ—Ä–≤–µ—Ä–∞"""
        self.current_html = html_content
        if self.server:
            self.server.current_html = html_content

class MagicIDE(QMainWindow):
    def __init__(self):
        super().__init__()
        self.web_server = SimpleWebServer()
        self.server_thread = None
        self.initUI()
        
    def initUI(self):
        self.setWindowTitle('‚ú® MagicWeb IDE - –°–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π —è–∑—ã–∫!')
        self.setGeometry(100, 100, 1400, 900)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª—å
        self.setStyleSheet("""
            QMainWindow {
                background: qlineargradient(x1: 0, y1: 0, x2: 1, y2: 1,
                    stop: 0 #2c3e50, stop: 1 #34495e);
            }
            QWidget {
                background: transparent;
            }
            QTextEdit, QTextBrowser {
                background: rgba(255, 255, 255, 0.95);
                border: 2px solid #bdc3c7;
                border-radius: 8px;
                padding: 12px;
                font-family: 'Courier New';
                font-size: 12px;
                color: #2c3e50;
            }
            QPushButton {
                background: qlineargradient(x1: 0, y1: 0, x2: 1, y2: 0,
                    stop: 0 #3498db, stop: 1 #2980b9);
                color: white;
                border: none;
                padding: 10px 16px;
                border-radius: 6px;
                font-weight: bold;
                font-size: 11px;
            }
            QPushButton:hover {
                background: qlineargradient(x1: 0, y1: 0, x2: 1, y2: 0,
                    stop: 0 #2980b9, stop: 1 #3498db);
            }
            QPushButton:pressed {
                background: #21618c;
            }
            QLineEdit {
                background: white;
                border: 2px solid #bdc3c7;
                border-radius: 6px;
                padding: 6px;
                color: #2c3e50;
                font-size: 11px;
            }
            QLabel {
                color: white;
                font-weight: bold;
                font-size: 11px;
            }
            QSplitter::handle {
                background: #7f8c8d;
            }
        """)
        
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        layout = QVBoxLayout(central_widget)
        layout.setSpacing(8)
        layout.setContentsMargins(12, 12, 12, 12)
        
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_panel = QHBoxLayout()
        control_panel.setSpacing(8)
        
        self.port_input = QLineEdit("8000")
        self.port_input.setFixedWidth(60)
        self.port_input.setPlaceholderText("–ü–æ—Ä—Ç")
        
        self.start_btn = QPushButton('üåê –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞')
        self.start_btn.clicked.connect(self.toggle_server)
        
        self.preview_btn = QPushButton('üëÅÔ∏è Preview')
        self.preview_btn.clicked.connect(self.update_preview)
        
        self.open_btn = QPushButton('üöÄ –û—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ')
        self.open_btn.clicked.connect(self.open_in_browser)
        
        control_panel.addWidget(QLabel("–ü–æ—Ä—Ç:"))
        control_panel.addWidget(self.port_input)
        control_panel.addWidget(self.start_btn)
        control_panel.addWidget(self.preview_btn)
        control_panel.addWidget(self.open_btn)
        control_panel.addStretch()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Å–ø–ª–∏—Ç—Ç–µ—Ä
        main_splitter = QSplitter(Qt.Horizontal)
        
        # –õ–µ–≤—ã–π —Å–ø–ª–∏—Ç—Ç–µ—Ä (—Ä–µ–¥–∞–∫—Ç–æ—Ä + –∫–æ–Ω—Å–æ–ª—å)
        left_splitter = QSplitter(Qt.Vertical)
        
        # –†–µ–¥–∞–∫—Ç–æ—Ä
        self.editor = QTextEdit()
        self.editor.setPlaceholderText("""üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MagicWeb! üéâ

–ü–†–û–°–¢–û –ü–ò–®–ò–¢–ï –ß–¢–û –£–ì–û–î–ù–û:

–ü—Ä–∏–≤–µ—Ç –º–∏—Ä! üöÄ
–°–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π —è–∑—ã–∫!

body: background: linear-gradient(135deg, #667eea, #764ba2)
body: color: white
body: font-size: 24px
body: text-align: center

alert –≠—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç!
log –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å

<button>–ù–∞–∂–º–∏ –º–µ–Ω—è</button>

–£—Ä–∞! üéâ

// –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å //
// –°–∏—Å—Ç–µ–º–∞ —Å–∞–º–∞ –≤—Å—ë –ø–æ–π–º—ë—Ç!""")
        
        # –ö–æ–Ω—Å–æ–ª—å
        self.console = QTextBrowser()
        self.console.setPlaceholderText("–ö–æ–Ω—Å–æ–ª—å –ø–æ—è–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ Preview...")
        
        left_splitter.addWidget(self.editor)
        left_splitter.addWidget(self.console)
        left_splitter.setSizes([600, 200])
        
        # Preview
        self.preview = QWebEngineView()
        self.preview.setHtml("""<html><body style="background: #ecf0f1; padding: 20px; font-family: Arial;">
            <h1 style="color: #2c3e50;">‚ú® MagicWeb IDE</h1>
            <p style="color: #7f8c8d;">–ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏—Ç–µ –∫–æ–¥ - —Å–∏—Å—Ç–µ–º–∞ –≤—Å—ë –ø–æ–π–º–µ—Ç!</p>
            <p style="color: #7f8c8d;">–ù–∞–∂–º–∏—Ç–µ "Preview" —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –º–∞–≥–∏—é! üéØ</p>
        </body></html>""")
        
        main_splitter.addWidget(left_splitter)
        main_splitter.addWidget(self.preview)
        main_splitter.setSizes([600, 600])
        
        # –°—Ç–∞—Ç—É—Å
        self.status_label = QLabel("‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥ –∏ –Ω–∞–∂–º–∏—Ç–µ Preview")
        self.status_label.setStyleSheet("color: #2ecc71; font-weight: bold; font-size: 12px;")
        
        layout.addLayout(control_panel)
        layout.addWidget(main_splitter)
        layout.addWidget(self.status_label)
        
        # –¢–∞–π–º–µ—Ä –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.update_timer = QTimer()
        self.update_timer.timeout.connect(self.auto_update)
        self.update_timer.start(1000)
        
    def toggle_server(self):
        """–ó–∞–ø—É—Å–∫/–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
        if self.web_server.is_running:
            self.stop_server()
        else:
            self.start_server()
    
    def start_server(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä"""
        try:
            port = int(self.port_input.text())
            self.web_server.port = port
            self.server_thread = threading.Thread(target=self.web_server.start_server)
            self.server_thread.daemon = True
            self.server_thread.start()
            
            self.start_btn.setText('üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä')
            self.status_label.setText(f"üåê –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: http://localhost:{port}")
            
        except ValueError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ—Ä—Ç–∞")
    
    def stop_server(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä"""
        self.web_server.stop_server()
        self.start_btn.setText('üåê –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞')
        self.status_label.setText("‚èπÔ∏è –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def update_preview(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç preview –∏ –∫–æ–Ω—Å–æ–ª—å"""
        try:
            code = self.editor.toPlainText()
            html_output, logs = MagicWeb.compile_to_html(code)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Å–æ–ª—å
            self.console.clear()
            self.console.append(f"üïí {datetime.now().strftime('%H:%M:%S')} - MagicWeb –ö–æ–º–ø–∏–ª—è—Ç–æ—Ä")
            self.console.append("=" * 50)
            
            for log in logs:
                self.console.append(log)
                print(log)
            
            self.console.append("=" * 50)
            self.console.append("‚úÖ –ì–æ—Ç–æ–≤–æ! –û—à–∏–±–∫–∏ –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è! üéâ")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º preview
            self.preview.setHtml(html_output)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä
            if self.web_server.is_running:
                self.web_server.update_content(html_output)
            
            self.status_label.setText("‚úÖ –ö–æ–º–ø–∏–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ö–æ–Ω—Å–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
            
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞: {e}"
            self.console.append(error_msg)
            print(error_msg)
            self.status_label.setText("‚ö†Ô∏è –û—à–∏–±–∫–∞ - —Å–º–æ—Ç—Ä–∏—Ç–µ –∫–æ–Ω—Å–æ–ª—å")
    
    def auto_update(self):
        """–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ —Å–µ—Ä–≤–µ—Ä–µ"""
        if self.web_server.is_running:
            try:
                code = self.editor.toPlainText()
                html_output, _ = MagicWeb.compile_to_html(code)
                self.web_server.update_content(html_output)
            except:
                pass
    
    def open_in_browser(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ"""
        if self.web_server.is_running:
            webbrowser.open(f"http://localhost:{self.web_server.port}")
        else:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä")
    
    def closeEvent(self, event):
        """–ü—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏"""
        if self.web_server.is_running:
            self.stop_server()
        event.accept()

def main():
    app = QApplication(sys.argv)
    app.setStyle('Fusion')
    
    font = QFont("Arial", 10)
    app.setFont(font)
    
    ide = MagicIDE()
    ide.show()
    sys.exit(app.exec_())

if __name__ == '__main__':
    main()